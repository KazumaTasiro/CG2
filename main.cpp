#include <Windows.h>
#include <d3d12.h>
#include <dxgi1_6.h>
#include <cassert>
#include <vector>
#include <string>
#include <DirectXMath.h>
#include <d3dcompiler.h>
#include <dinput.h>
#include <math.h>
#include <DirectXTex.h>
#include"Triangle.h"
#define DIRECTINPUT_VERSION  0x0800 //DirectInputのバージョン指定


using namespace DirectX;
#pragma comment(lib,"d3d12.lib")
#pragma comment(lib,"dxgi.lib")
#pragma comment(lib, "d3dcompiler.lib")
#pragma comment(lib,"dinput8.lib")
#pragma comment(lib,"dxguid.lib")

const float PI = 3.141592f;
//ウィンドウプロシージャ
LRESULT WindowProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {
	//メッセージに応じてゲーム固有の処理を行う
	switch (msg) {
		//ウィンドウが破壊された
	case WM_DESTROY:
		//OSに対して、アプリの終了を伝える
		PostQuitMessage(0);
		return 0;
	}

	//標準のメッセージ処理を行う
	return DefWindowProc(hwnd, msg, wparam, lparam);
}

//Windowsアプリでのエントリーポイント(main関数)
int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int) {
	//コンソールの文字出力
	OutputDebugStringA("Hello,DirectX!!\n");

	//ウィンドウサイズ
	const int window_width = 1280;
	const int window_height = 720;

	//ウィンドウクラスの設定
	WNDCLASSEX w{};
	w.cbSize = sizeof(WNDCLASSEX);			//ウィンドウプロシージャを設定
	w.lpfnWndProc = (WNDPROC)WindowProc;	//ウィンドウプロシージャを設定
	w.lpszClassName = L"DirectXGame";		//ウィンドウクラス名
	w.hInstance = GetModuleHandle(nullptr); //ウィンドウハンドル
	w.hCursor = LoadCursor(NULL, IDC_ARROW);//カーソル指定

	//ウィンドウクラスをOSに登録する
	RegisterClassEx(&w);
	//ウィンドウサイズ｛　X座標　Y座標　横幅　縦幅｝
	RECT wrc = { 0,0,window_width,window_height };
	//自動でサイズを調整する
	AdjustWindowRect(&wrc, WS_OVERLAPPEDWINDOW, false);
	//ウィンドウオブジェクトの生成
	HWND hwnd = CreateWindow(w.lpszClassName,
		L"DirectXGame",
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		wrc.right - wrc.left,
		wrc.bottom - wrc.top,
		nullptr,
		nullptr,
		w.hInstance,
		nullptr);

	//ウィンドウを表示状態にする
	ShowWindow(hwnd, SW_SHOW);

	MSG msg{};//メッセージ

	//DIrectX初期化処理ここまから
#ifdef _DEBUG
//デバッグレイヤーをオンに
	ID3D12Debug* debugController;
	if (SUCCEEDED(D3D12GetDebugInterface(IID_PPV_ARGS(&debugController)))) {
		debugController->EnableDebugLayer();
	}
#endif
	HRESULT result;
	ID3D12Device* device = nullptr;
	IDXGIFactory7* dxgiFactory = nullptr;
	IDXGISwapChain4* swapChain = nullptr;
	ID3D12CommandAllocator* cmdAllocator = nullptr;
	ID3D12GraphicsCommandList* commandList = nullptr;
	ID3D12CommandQueue* commandQueue = nullptr;
	ID3D12DescriptorHeap* rtvHeap = nullptr;

	//DXGのファクトリーの生成
	result = CreateDXGIFactory(IID_PPV_ARGS(&dxgiFactory));
	assert(SUCCEEDED(result));

	//アダプタの列挙用
	std::vector<IDXGIAdapter4*>adapters;
	//ここで特定の名前を持つアダプターオブジェクトが入る
	IDXGIAdapter4* tmpAdapter = nullptr;
	//パフォーマンスが高いものから順に、すべてのアダプターを列挙する
	for (UINT i = 0;
		dxgiFactory->EnumAdapterByGpuPreference(i, DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE, IID_PPV_ARGS(&tmpAdapter)) != DXGI_ERROR_NOT_FOUND; i++) {
		//動的配列に追加する
		adapters.push_back(tmpAdapter);
	}
	//だと追うなアダプタを選別する
	for (size_t i = 0; i < adapters.size(); i++) {
		DXGI_ADAPTER_DESC3 adapterDesc;
		//アダプターの情報を取得する
		adapters[i]->GetDesc3(&adapterDesc);

		//ソフトウェアデバイスを回避
		if (!(adapterDesc.Flags & DXGI_ADAPTER_FLAG3_SOFTWARE)) {
			//デバイスを利用してループを抜ける
			tmpAdapter = adapters[i];
			break;
		}
	}
	//対応レベルの配列
	D3D_FEATURE_LEVEL levels[] = {
		D3D_FEATURE_LEVEL_12_1,
		D3D_FEATURE_LEVEL_12_0,
		D3D_FEATURE_LEVEL_11_1,
		D3D_FEATURE_LEVEL_11_0,
	};
	D3D_FEATURE_LEVEL featureLevel;

	for (size_t i = 0; i < _countof(levels); i++) {
		//採用したアダプターでデバイスを生成
		result = D3D12CreateDevice(tmpAdapter, levels[i], IID_PPV_ARGS(&device));
		if (result == S_OK) {
			//デバイスを生成できた時点でループを抜ける
			featureLevel = levels[i];
			break;
		}
	}
	result = device->CreateCommandAllocator(
		D3D12_COMMAND_LIST_TYPE_DIRECT,
		IID_PPV_ARGS(&cmdAllocator));
	assert(SUCCEEDED(result));
	// コマンドリストを生成
	result = device->CreateCommandList(0,
		D3D12_COMMAND_LIST_TYPE_DIRECT,
		cmdAllocator, nullptr,
		IID_PPV_ARGS(&commandList));
	assert(SUCCEEDED(result));
	//コマンドキューの設定
	D3D12_COMMAND_QUEUE_DESC commandQueueDesc{};
	//コマンドキューを生成
	result = device->CreateCommandQueue(&commandQueueDesc, IID_PPV_ARGS(&commandQueue));
	assert(SUCCEEDED(result));
	// スワップチェーンの設定
	DXGI_SWAP_CHAIN_DESC1 swapChainDesc{};
	swapChainDesc.Width = 1280;
	swapChainDesc.Height = 720;
	swapChainDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM; // 色情報の書式
	swapChainDesc.SampleDesc.Count = 1; // マルチサンプルしない
	swapChainDesc.BufferUsage = DXGI_USAGE_BACK_BUFFER; // バックバッファ用
	swapChainDesc.BufferCount = 2; // バッファ数を2つに設定
	swapChainDesc.SwapEffect = DXGI_SWAP_EFFECT_FLIP_DISCARD; // フリップ後は破棄
	swapChainDesc.Flags = DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH;
	// スワップチェーンの生成
	result = dxgiFactory->CreateSwapChainForHwnd(
		commandQueue, hwnd, &swapChainDesc, nullptr, nullptr,
		(IDXGISwapChain1**)&swapChain);
	assert(SUCCEEDED(result));
	// デスクリプタヒープの設定
	D3D12_DESCRIPTOR_HEAP_DESC rtvHeapDesc{};
	rtvHeapDesc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_RTV; // レンダーターゲットビュー
	rtvHeapDesc.NumDescriptors = swapChainDesc.BufferCount; // 裏表の2つ
	// デスクリプタヒープの生成
	device->CreateDescriptorHeap(&rtvHeapDesc, IID_PPV_ARGS(&rtvHeap));
	// バックバッファ
	std::vector<ID3D12Resource*> backBuffers;
	backBuffers.resize(swapChainDesc.BufferCount);
	// スワップチェーンの全てのバッファについて処理する
	for (size_t i = 0; i < backBuffers.size(); i++) {
		// スワップチェーンからバッファを取得
		swapChain->GetBuffer((UINT)i, IID_PPV_ARGS(&backBuffers[i]));
		// デスクリプタヒープのハンドルを取得
		D3D12_CPU_DESCRIPTOR_HANDLE rtvHandle = rtvHeap->GetCPUDescriptorHandleForHeapStart();
		// 裏か表かでアドレスがずれる
		rtvHandle.ptr += i * device->GetDescriptorHandleIncrementSize(rtvHeapDesc.Type);
		// レンダーターゲットビューの設定
		D3D12_RENDER_TARGET_VIEW_DESC rtvDesc{};
		// シェーダーの計算結果をSRGBに変換して書き込む
		rtvDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
		rtvDesc.ViewDimension = D3D12_RTV_DIMENSION_TEXTURE2D;
		// レンダーターゲットビューの生成
		device->CreateRenderTargetView(backBuffers[i], &rtvDesc, rtvHandle);
	}
	// フェンスの生成
	ID3D12Fence* fence = nullptr;
	UINT64 fenceVal = 0;
	result = device->CreateFence(fenceVal, D3D12_FENCE_FLAG_NONE, IID_PPV_ARGS(&fence));
	//DirectInputの初期化
	IDirectInput8* directInput = nullptr;
	result = DirectInput8Create(
		w.hInstance, DIRECTINPUT_VERSION, IID_IDirectInput8,
		(void**)&directInput, nullptr);
	assert(SUCCEEDED(result));
	//キーボードデバイスの生成
	IDirectInputDevice8* keyboard = nullptr;
	result = directInput->CreateDevice(GUID_SysKeyboard, &keyboard, NULL);
	assert(SUCCEEDED(result));
	//入力データ形式のセット
	result = keyboard->SetDataFormat(&c_dfDIKeyboard);
	assert(SUCCEEDED(result));
	//排他的制御レベルのセット
	result = keyboard->SetCooperativeLevel(
		hwnd, DISCL_FOREGROUND | DISCL_NONEXCLUSIVE | DISCL_NOWINKEY);
	assert(SUCCEEDED(result));
	//Vertex vertices[] = {
	//	// x      y     z       u     v
	//	{{-0.4f, -0.7f, 0.0f}, {0.0f, 1.0f}}, // 左下
	//	{{-0.4f, +0.7f, 0.0f}, {0.0f, 0.0f}}, // 左上
	//	{{+0.4f, -0.7f, 0.0f}, {1.0f, 1.0f}}, // 右下
	//	{{+0.4f, +0.7f, 0.0f}, {1.0f, 0.0f}}, // 右上
	//};
	DrawingMesh::Vertex vertex[] = { 
		{ {-0.1f, -0.1f, 0.0f}, {0.0f, 1.0f} },
		{ {-0.1f, +0.1f, 0.0f}, {0.0f, 0.0f} },
		{ {+0.1f, -0.1f, 0.0f}, {1.0f, 1.0f} },
		{ {+0.1f, +0.1f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex2[] = {
		{ {-0.5f, -0.1f, 0.0f}, {0.0f, 1.0f} },
		{ {-0.5f, +0.1f, 0.0f}, {0.0f, 0.0f} },
		{ {-0.4f, -0.1f, 0.0f}, {1.0f, 1.0f} },
		{ {-0.4f, +0.1f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex3[] = {
		{ {-0.5f, +0.4f, 0.0f}, {0.0f, 1.0f} },
		{ {-0.5f, +0.2f, 0.0f}, {0.0f, 0.0f} },
		{ {-0.4f, +0.4f, 0.0f}, {1.0f, 1.0f} },
		{ {-0.4f, +0.2f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex4[] = {
		{ {+0.5f, -0.1f, 0.0f}, {0.0f, 1.0f} },
		{ {+0.5f, +0.1f, 0.0f}, {0.0f, 0.0f} },
		{ {+0.4f, -0.1f, 0.0f}, {1.0f, 1.0f} },
		{ {+0.4f, +0.1f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex5[] = {
		{ {+0.5f, +0.4f, 0.0f}, {0.0f, 1.0f} },
		{ {+0.5f, +0.2f, 0.0f}, {0.0f, 0.0f} },
		{ {+0.4f, +0.4f, 0.0f}, {1.0f, 1.0f} },
		{ {+0.4f, +0.2f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex6[] = {
		{ {+0.7f, -0.1f, 0.0f}, {0.0f, 1.0f} },
		{ {+0.7f, +0.1f, 0.0f}, {0.0f, 0.0f} },
		{ {+0.6f, -0.1f, 0.0f}, {1.0f, 1.0f} },
		{ {+0.6f, +0.1f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex7[] = {
		{ {+0.7f, +0.4f, 0.0f}, {0.0f, 1.0f} },
		{ {+0.7f, +0.2f, 0.0f}, {0.0f, 0.0f} },
		{ {+0.6f, +0.4f, 0.0f}, {1.0f, 1.0f} },
		{ {+0.6f, +0.2f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex8[] = {
		{ {-0.7f, -0.1f, 0.0f}, {0.0f, 1.0f} },
		{ {-0.7f, +0.1f, 0.0f}, {0.0f, 0.0f} },
		{ {-0.6f, -0.1f, 0.0f}, {1.0f, 1.0f} },
		{ {-0.6f, +0.1f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex9[] = {
		{ {-0.7f, +0.4f, 0.0f}, {0.0f, 1.0f} },
		{ {-0.7f, +0.2f, 0.0f}, {0.0f, 0.0f} },
		{ {-0.6f, +0.4f, 0.0f}, {1.0f, 1.0f} },
		{ {-0.6f, +0.2f, 0.0f}, {1.0f, 0.0f} },
	};
	DrawingMesh::Vertex vertex10[] = {
		{ {-0.1f, +0.4f, 0.0f}, {0.0f, 1.0f} },
		{ {-0.1f, +0.2f, 0.0f}, {0.0f, 0.0f} },
		{ {+0.1f, +0.4f, 0.0f}, {1.0f, 1.0f} },
		{ {+0.1f, +0.2f, 0.0f}, {1.0f, 0.0f} },
	};

	DrawingMesh* mesh = new DrawingMesh(device,vertex,_countof(vertex));
	DrawingMesh* mesh2 = new DrawingMesh(device, vertex2, _countof(vertex));
	DrawingMesh* mesh3 = new DrawingMesh(device, vertex3, _countof(vertex));
	DrawingMesh* mesh4 = new DrawingMesh(device, vertex4, _countof(vertex));
	DrawingMesh* mesh5 = new DrawingMesh(device, vertex5, _countof(vertex));
	DrawingMesh* mesh6 = new DrawingMesh(device, vertex6, _countof(vertex));
	DrawingMesh* mesh7 = new DrawingMesh(device, vertex7, _countof(vertex));
	DrawingMesh* mesh8 = new DrawingMesh(device, vertex8, _countof(vertex));
	DrawingMesh* mesh9 = new DrawingMesh(device, vertex9, _countof(vertex));
	DrawingMesh* mesh10 = new DrawingMesh(device, vertex10, _countof(vertex));
	//DIrectX初期化処理ここまで
	// 描画初期化処理
	



	//ゲームループ
	while (true) {
		//メッセージがある？
		if (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE)) {
			TranslateMessage(&msg);//キー入力メッセージの処理
			DispatchMessage(&msg);//プロシージャにメッセージを送る
		}

		// Xボタンで終了メッセージが来たらゲームループを抜ける
		if (msg.message == WM_QUIT) {
			break;
		}
		//DirectX舞フレーム処理　ここから
		//キーボード情報の取得開始
		keyboard->Acquire();

		//全キーの入力状態を取得する

		BYTE key[256] = {};
		keyboard->GetDeviceState(sizeof(key), key);

		//数字の０キーが押されていたら
		if (key[DIK_0]) {
			OutputDebugStringA("Hit 0\n");//出力ウィンドウに「Hit 0」と表示
		}

		//DirectX舞フレーム処理　ここまで

		// バックバッファの番号を取得(2つなので0番か1番)
		UINT bbIndex = swapChain->GetCurrentBackBufferIndex();
		// 1.リソースバリアで書き込み可能に変更
		D3D12_RESOURCE_BARRIER barrierDesc{};
		barrierDesc.Transition.pResource = backBuffers[bbIndex]; // バックバッファを指定
		barrierDesc.Transition.StateBefore = D3D12_RESOURCE_STATE_PRESENT; // 表示状態から
		barrierDesc.Transition.StateAfter = D3D12_RESOURCE_STATE_RENDER_TARGET; // 描画状態へ
		commandList->ResourceBarrier(1, &barrierDesc);

		// 2.描画先の変更
		// レンダーターゲットビューのハンドルを取得
		D3D12_CPU_DESCRIPTOR_HANDLE rtvHandle = rtvHeap->GetCPUDescriptorHandleForHeapStart();
		rtvHandle.ptr += bbIndex * device->GetDescriptorHandleIncrementSize(rtvHeapDesc.Type);
		commandList->OMSetRenderTargets(1, &rtvHandle, false, nullptr);

		// 3.画面クリア R G B A
		FLOAT clearColor[] = { 0.1f,0.25f, 0.5f,0.0f }; // 青っぽい色
		commandList->ClearRenderTargetView(rtvHandle, clearColor, 0, nullptr);

		/*if (key[DIK_SPACE]) {
			FLOAT clearColor[] = { 1.0f,0.2f,0.8f };
			commandList->ClearRenderTargetView(rtvHandle, clearColor, 0, nullptr);
		}*/

		// 4.描画コマンドここから
		// ビューポート設定コマンド
		D3D12_VIEWPORT viewport{};
		viewport.Width = window_width;//横幅
		viewport.Height = window_height;//縦幅
		viewport.TopLeftX = 0;//左上X
		viewport.TopLeftY = 0;//左上Y
		viewport.MinDepth = 0.0f;//最小深度（０でよい）
		viewport.MaxDepth = 1.0f;//最大深度（１でよい）
		// ビューポート設定コマンドを、コマンドリストに積む
		commandList->RSSetViewports(1, &viewport);
		//シザー短形
		D3D12_RECT scissorRect{};
		scissorRect.left = 0;									// 切り抜き座標左
		scissorRect.right = scissorRect.left + window_width;	// 切り抜き座標右
		scissorRect.top = 0;									// 切り抜き座標上
		scissorRect.bottom = scissorRect.top + window_height;	// 切り抜き座標下
		// シザー矩形設定コマンドを、コマンドリストに積む
		commandList->RSSetScissorRects(1, &scissorRect);
		mesh->Draw(commandList);
		mesh2->Draw(commandList);
		mesh3->Draw(commandList);
		mesh4->Draw(commandList);
		mesh5->Draw(commandList);
		mesh6->Draw(commandList);
		mesh7->Draw(commandList);
		mesh8->Draw(commandList);
		mesh9->Draw(commandList);
		mesh10->Draw(commandList);

		// 4.描画コマンドここまで

		// 5.リソースバリアを戻す
		barrierDesc.Transition.StateBefore = D3D12_RESOURCE_STATE_RENDER_TARGET; // 描画状態から
		barrierDesc.Transition.StateAfter = D3D12_RESOURCE_STATE_PRESENT; // 表示状態へ
		commandList->ResourceBarrier(1, &barrierDesc);
		// 命令のクローズ
		result = commandList->Close();
		assert(SUCCEEDED(result));
		// コマンドリストの実行
		ID3D12CommandList* commandLists[] = { commandList };
		commandQueue->ExecuteCommandLists(1, commandLists);
		// 画面に表示するバッファをフリップ(裏表の入替え)
		result = swapChain->Present(1, 0);
		assert(SUCCEEDED(result));
		// コマンドの実行完了を待つ
		commandQueue->Signal(fence, ++fenceVal);
		if (fence->GetCompletedValue() != fenceVal) {
			HANDLE event = CreateEvent(nullptr, false, false, nullptr);
			fence->SetEventOnCompletion(fenceVal, event);
			WaitForSingleObject(event, INFINITE);
			CloseHandle(event);
		}
		// キューをクリア
		result = cmdAllocator->Reset();
		assert(SUCCEEDED(result));
		// 再びコマンドリストを貯める準備
		result = commandList->Reset(cmdAllocator, nullptr);
		assert(SUCCEEDED(result));
	}

	//ウィンドウクラスを登録解除
	UnregisterClass(w.lpszClassName, w.hInstance);
	return 0;
}